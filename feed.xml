<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://abhijit-c.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://abhijit-c.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-18T16:41:04+00:00</updated><id>https://abhijit-c.github.io/feed.xml</id><title type="html">blank</title><subtitle>Abhijit Chowdhary&apos;s personal website. </subtitle><entry><title type="html">I’m Transitioning from Conda to Pixi</title><link href="https://abhijit-c.github.io/blog/2025/pixi/" rel="alternate" type="text/html" title="I’m Transitioning from Conda to Pixi"/><published>2025-06-27T02:35:00+00:00</published><updated>2025-06-27T02:35:00+00:00</updated><id>https://abhijit-c.github.io/blog/2025/pixi</id><content type="html" xml:base="https://abhijit-c.github.io/blog/2025/pixi/"><![CDATA[<p><strong>Warning</strong>: I’m not really making a point here, I’m mostly just venting.</p> <h1 id="the-problem">The Problem</h1> <p>Surely this must be a common problem among computational mathematicians. You teach a class with a computational component, and you want to distribute code to your students. The average student in these classes at best has exposure to MATLAB, or maybe Mathematica. But, the reality is that an increasing majority of mathematical research is being done in Python, not to mention that it’s obviously massively applicable to industry. I like my students. I want them to succeed. I want them to learn and use Python.</p> <p>Naively, I write some nice Python code. Clean, readable, beautiful visualizations. I hand them the files. With wonder, curiosity, and hope, they say “Cool! How do I run this?”.</p> <p>Isn’t it insane that I have to snuff out the life in their eyes on step one?</p> <p>Okay, I could use something like Google Colab. I suppose I understand why so many people in my field are comfortable with notebooks, what with that being the easiest way to run a simple script. Otherwise, I’m staring down the barrel of explaining 1) how to get Python on your system to begin with and why that shouldn’t be something like your system’s package manager, 2) why, for our scientific computing ecosystem, we have to use packages off of conda-forge instead of PyPI (mostly), and 3) conda itself. Each of those are uncomfortable conversations when I’m trying to convince them to use a different tool (MATLAB is a 1-click install). Compounding the problem, sometimes I have to begin with explaining what a terminal is.</p> <p>Well, Pixi doesn’t exactly fix this. I should just wrap up this post give them notebooks. But, I hate the overreliance of our space on notebooks. They’re great for exploration, or tutorials. But, their format inherently encourages bad programming practices and students, who haven’t seen anything else, end up writing monster notebooks. I debugged multiple such specimens during my PhD years, trying to strip out the critical pieces for my own research. I want them to see better ways to do things.</p> <h1 id="pixi">Pixi</h1> <p><a href="https://pixi.sh/latest/">Pixi</a> is a new(-ish) package manager that operates off of conda-forge. That’s critical for scientific computing, given how many dependencies in our field are enormous C/C++/Fortran libraries. PyPI is great for Python packages, but it explicitly isn’t designed for such projects. Otherwise, I would happily be using <a href="https://docs.astral.sh/uv/">uv</a>.</p> <p>Why not just use Conda? I actually don’t have big problems with it, especially after mamba mostly solved the performance issues. However, it’s far from a seamless experience; there’s a lot of intermediate steps and manual intervention required to set up a new enviornment. Not to mention it drapes itself all over your system and paths, which causes problems for other tools. For example, <a href="https://www.firedrakeproject.org/">Firedrake</a>, an excellent finite element library, specifically calls out conda as an anti-requirement. Furthermore, most people I know just ad-hoc install packages into enviornments. More often than note, I find existing <code class="language-plaintext highlighter-rouge">env.yml</code> to be outdated, or just plain wrong.</p> <p>In contrast, Pixi is faster, doesn’t pull any path shenanigans (it’s just a binary), and is specifically designed to integrate into workspaces. If I want to pass some code to students, I toss them repository with the files, a <code class="language-plaintext highlighter-rouge">pixi.toml</code> + <code class="language-plaintext highlighter-rouge">pixi.lock</code>, and a README with a command or two.</p> <p>Recently, I took steps to completely clean my system of Conda (unsurprisingly annoying, but therapeutic), and now I’m using Pixi exclusively for my research. I’m happy to say, atleast in PDE (FEniCS) and neural network land (PyTorch \&amp; JAX), it has been a mostly smooth transition. It was somewhat uncomfortable to transition to thinking about projects, as opposed to global enviornments. I realized I had developed a bad habit of creating “mega-enviornments”, with a bunch of frequently used packages, that I just carted around to different projects. I suppose bad-habits like that are things that Pixi should fix, though I admit that spinning up a whole new workspace for tiny little Python scripts seems a bit overkill. I should look into <code class="language-plaintext highlighter-rouge">uv</code>’s ability to, on-demand, load dependencies for this setting. For example, from their website</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># /// script
# dependencies = [
#   "requests&lt;3",
#   "rich",
# ]
# ///
</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">rich.pretty</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">https://peps.python.org/api/peps.json</span><span class="sh">"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
<span class="nf">pprint</span><span class="p">([(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()][:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div></div> <p>This script can just be run, with dependencies resolved on-demand, by</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ <span class="nb">time </span>uv run example.py
Installed 9 packages <span class="k">in </span>27ms
<span class="o">[</span>
│   <span class="o">(</span><span class="s1">'1'</span>, <span class="s1">'PEP Purpose and Guidelines'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'2'</span>, <span class="s1">'Procedure for Adding New Modules'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'3'</span>, <span class="s1">'Guidelines for Handling Bug Reports'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'4'</span>, <span class="s1">'Deprecation of Standard Modules'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'5'</span>, <span class="s1">'Guidelines for Language Evolution'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'6'</span>, <span class="s1">'Bug Fix Releases'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'7'</span>, <span class="s1">'Style Guide for C Code'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'8'</span>, <span class="s1">'Style Guide for Python Code'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'9'</span>, <span class="s1">'Sample Plaintext PEP Template'</span><span class="o">)</span>,
│   <span class="o">(</span><span class="s1">'10'</span>, <span class="s1">'Voting Guidelines'</span><span class="o">)</span>
<span class="o">]</span>
uv run example.py  0.50s user 0.15s system 76% cpu 0.851 total
</code></pre></div></div> <p>I’m trained by the previous python ecosystem to think that this would incur unbearable latency. But 27ms is basically the same time as a requests call, this is fantastic work. The new age of Python developer tools (seemingly all written in Rust) is wonderful to work with. From the Pixi folk, I’m also very much looking forward to the completion of rattler-build, so that it’s easier to push packages to conda-forge as well.</p>]]></content><author><name></name></author><category term="personal"/><category term="math,"/><category term="python,"/><category term="pixi"/><summary type="html"><![CDATA[The python packaging system is insane.]]></summary></entry><entry><title type="html">Hello, World!</title><link href="https://abhijit-c.github.io/blog/2025/hello-world/" rel="alternate" type="text/html" title="Hello, World!"/><published>2025-05-06T17:37:00+00:00</published><updated>2025-05-06T17:37:00+00:00</updated><id>https://abhijit-c.github.io/blog/2025/hello-world</id><content type="html" xml:base="https://abhijit-c.github.io/blog/2025/hello-world/"><![CDATA[<h1 id="youve-landed-on-my-blog">You’ve landed on my blog!</h1> <p>Welcome! Feel free to explore and leave comments. If you have any questions or suggestions, please don’t hesitate to reach out. If it’s urgent, I’m best reached via email.</p>]]></content><author><name></name></author><category term="personal"/><category term="math"/><summary type="html"><![CDATA[You've landed on my blog! Sorry...]]></summary></entry></feed>